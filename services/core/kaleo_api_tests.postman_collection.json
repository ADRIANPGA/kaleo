{
	"info": {
		"_postman_id": "YOUR_COLLECTION_ID",
		"name": "Kaleo Core API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Tests for the Kaleo Core API, focusing on authentication."
	},
	"item": [
		{
			"name": "1. Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Response has user id and email\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"id\");",
							"    pm.expect(responseData).to.have.property(\"email\");",
							"    // Store email for login",
							"    pm.collectionVariables.set(\"user_email\", responseData.email || \"testuser+\" + Date.now() + \"@example.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testuser+\" + Date.now() + \"@example.com\",\n    \"password\": \"aSecurePassword123!\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					],
					"description": "Adjust the path to your actual registration endpoint (e.g., /users/ or /auth/signup)"
				},
				"description": "Registers a new user. Assumes the endpoint is /auth/register and accepts email/password. **Adjust the URL and body as needed.**"
			},
			"response": []
		},
		{
			"name": "2. Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Response contains access_token\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"access_token\");",
							"    // Store the access token in a collection variable",
							"    pm.collectionVariables.set(\"access_token\", responseData.access_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{user_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "aSecurePassword123!",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Logs in a user to obtain an access token. Uses email from registration step (or a default) as username."
			},
			"response": []
		},
		{
			"name": "3. Get Current User (Protected)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ensure the access_token variable is available",
							"if (!pm.collectionVariables.get(\"access_token\")) {",
							"    console.warn(\"Access token not found. Run the 'Login User' request first.\");",
							"    // Optionally, stop the request if no token",
							"    // postman.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Response has user data (id, email, roles)\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"id\");",
							"    pm.expect(responseData).to.have.property(\"email\");",
							"    pm.expect(responseData).to.have.property(\"roles\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"me"
					],
					"description": "Fetches the current authenticated user's details. This route should be protected."
				},
				"description": "Accesses a protected route (/users/me) using the Bearer token obtained from login."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "The base URL of your API (e.g., http://localhost:8000 or your production URL)"
		},
		{
			"key": "user_email",
			"value": "default_user_for_login@example.com",
			"type": "string",
			"description": "Stores the email of the registered user, used for login."
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string",
			"description": "Stores the JWT access token obtained after login."
		}
	]
} 