/**
 * Generated by orval v7.9.0 游꽄
 * Do not edit manually.
 * Kaleo API
 * API Backend para control nutricional y cal칩rico. Incluye login b치sico, SSO Google/Microsoft y perfil de usuario.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  BadRequestResponse,
  ForbiddenResponse,
  InternalServerErrorResponse,
  LoginRequest,
  LoginResponseResponse,
  NotFoundResponse,
  OAuthTokenRequest,
  UnauthorizedResponse,
  UserProfileResponseResponse
} from '.././schemas';





/**
 * @summary Login tradicional con usuario/contrase침a
 */
export const postAuthLogin = (
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginResponseResponse>> => {
    
    
    return axios.post(
      `/auth/login`,
      loginRequest,options
    );
  }



export const getPostAuthLoginMutationOptions = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginRequest
    export type PostAuthLoginMutationError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>

    /**
 * @summary Login tradicional con usuario/contrase침a
 */
export const usePostAuthLogin = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Login con token de Google
 */
export const postAuthOauthGoogle = (
    oAuthTokenRequest: OAuthTokenRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginResponseResponse>> => {
    
    
    return axios.post(
      `/auth/oauth/google`,
      oAuthTokenRequest,options
    );
  }



export const getPostAuthOauthGoogleMutationOptions = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthGoogle>>, TError,{data: OAuthTokenRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthGoogle>>, TError,{data: OAuthTokenRequest}, TContext> => {

const mutationKey = ['postAuthOauthGoogle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthOauthGoogle>>, {data: OAuthTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthOauthGoogle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthOauthGoogleMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthOauthGoogle>>>
    export type PostAuthOauthGoogleMutationBody = OAuthTokenRequest
    export type PostAuthOauthGoogleMutationError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>

    /**
 * @summary Login con token de Google
 */
export const usePostAuthOauthGoogle = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthGoogle>>, TError,{data: OAuthTokenRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postAuthOauthGoogle>>,
        TError,
        {data: OAuthTokenRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthOauthGoogleMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Login con token de Microsoft
 */
export const postAuthOauthMicrosoft = (
    oAuthTokenRequest: OAuthTokenRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoginResponseResponse>> => {
    
    
    return axios.post(
      `/auth/oauth/microsoft`,
      oAuthTokenRequest,options
    );
  }



export const getPostAuthOauthMicrosoftMutationOptions = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthMicrosoft>>, TError,{data: OAuthTokenRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthMicrosoft>>, TError,{data: OAuthTokenRequest}, TContext> => {

const mutationKey = ['postAuthOauthMicrosoft'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthOauthMicrosoft>>, {data: OAuthTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthOauthMicrosoft(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthOauthMicrosoftMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthOauthMicrosoft>>>
    export type PostAuthOauthMicrosoftMutationBody = OAuthTokenRequest
    export type PostAuthOauthMicrosoftMutationError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>

    /**
 * @summary Login con token de Microsoft
 */
export const usePostAuthOauthMicrosoft = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthMicrosoft>>, TError,{data: OAuthTokenRequest}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postAuthOauthMicrosoft>>,
        TError,
        {data: OAuthTokenRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthOauthMicrosoftMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Perfil del usuario autenticado
 */
export const getUsersMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserProfileResponseResponse>> => {
    
    
    return axios.get(
      `/users/me`,options
    );
  }


export const getGetUsersMeQueryKey = () => {
    return [`/users/me`] as const;
    }

    
export const getGetUsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse | InternalServerErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({ signal }) => getUsersMe({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>
export type GetUsersMeQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse | InternalServerErrorResponse>


/**
 * @summary Perfil del usuario autenticado
 */

export function useGetUsersMe<TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse | InternalServerErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersMeQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



